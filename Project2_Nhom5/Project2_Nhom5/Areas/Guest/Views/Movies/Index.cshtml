@model IEnumerable<Project2_Nhom5.Models.Movie>
@{
    ViewData["Title"] = "Phim";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        :root { --primary-color: #ff6b35; --secondary-color: #1a1a2e; --accent-color: #16213e; --text-primary: #333; --text-secondary: #666; --footer-text: #666; --bg-primary: #ffffff; --bg-secondary: #f8f9fa; --card-bg: #ffffff; --border-color: #e0e0e0; --shadow: 0 4px 20px rgba(0,0,0,0.1); --gradient: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%); }
        [data-theme="dark"] { --text-primary: #ffffff; --text-secondary: #b0b0b0; --footer-text: #b0b0b0; --bg-primary: #0f0f1a; --bg-secondary: #1a1a2e; --card-bg: #16213e; --border-color: #333; --shadow: 0 4px 20px rgba(0,0,0,0.3); }
        [data-theme="dark"] .form-control, [data-theme="dark"] .form-select { background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary); }
        [data-theme="dark"] .form-control:focus, [data-theme="dark"] .form-select:focus { background-color: var(--card-bg); border-color: var(--primary-color); color: var(--text-primary); box-shadow: 0 0 0 0.2rem rgba(255, 107, 53, 0.25); }
        [data-theme="dark"] .form-control::placeholder { color: var(--text-secondary); }
        [data-theme="dark"] .modal-backdrop { background-color: rgba(0, 0, 0, 0.8); }
        * { transition: all 0.3s ease; }
        .hero-section { background: var(--bg-primary); min-height: 40vh; display: flex; align-items: center; position: relative; overflow: hidden; }
        .hero-title { font-size: 2.5rem; font-weight: bold; margin-bottom: 1rem; background: var(--gradient); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; }
        .hero-subtitle { font-size: 1.1rem; color: var(--text-secondary); margin-bottom: 1.5rem; }
        .movie-card { background: var(--card-bg); border-radius: 20px; overflow: hidden; box-shadow: var(--shadow); border: 1px solid var(--border-color); position: relative; margin-bottom: 2rem; }
        .movie-card:hover { transform: translateY(-6px); box-shadow: 0 20px 40px rgba(0,0,0,0.15); }
        .movie-poster { width: 100%; height: 350px; object-fit: cover; }
        .movie-info { padding: 1.2rem; display: flex; flex-direction: column; height: 100%; }
        .movie-title { font-size: 1.2rem; font-weight: bold; margin-bottom: 0.5rem; color: var(--text-primary); }
        .movie-genre { color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 0.5rem; }
        .movie-status { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 0.8rem; font-weight: 600; margin-bottom: 0.5rem; }
        .status-dangchieu { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; }
        .status-sapchieu { background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%); color: white; }
        .status-ngungchieu { background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%); color: white; }
        .rating { display: flex; align-items: center; margin-bottom: 1rem; }
        .stars { color: #ffc107; margin-right: 0.5rem; }
        .book-btn { background: var(--gradient); border: none; padding: 10px 25px; border-radius: 25px; color: white; font-weight: 500; width: 100%; margin-top: auto; }
        .book-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(255, 107, 53, 0.3); color: white; }
        .filter-section { background: var(--bg-secondary); padding: 2rem 0; margin-bottom: 2rem; }
        .filter-btn { background: var(--gradient); border: none; padding: 8px 20px; border-radius: 20px; color: white; font-weight: 500; margin: 0 5px; }
        .filter-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(255, 107, 53, 0.3); color: white; }
        .filter-btn.active { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); }
        .reveal { opacity: 0; transform: translateY(30px); transition: all 0.6s ease; }
        .reveal.active { opacity: 1; transform: translateY(0); }
    </style>
}

<!-- Hero Section -->
<section class="hero-section">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8">
                <h1 class="hero-title reveal">Khám Phá Bộ Sưu Tập Phim</h1>
                <p class="hero-subtitle reveal">Hàng trăm bộ phim hay nhất với chất lượng hình ảnh và âm thanh đỉnh cao</p>
            </div>
            <div class="col-lg-4">
                <div class="text-center">
                    <i class="fas fa-film fa-6x text-primary"></i>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Filter Section -->
<section class="filter-section">
    <div class="container">
        <div class="text-center">
            <h3 class="mb-4">Lọc theo trạng thái</h3>
            <button class="filter-btn active" onclick="filterMovies('all')">Tất cả</button>
            <button class="filter-btn" onclick="filterMovies('dangchieu')">Đang chiếu</button>
            <button class="filter-btn" onclick="filterMovies('sapchieu')">Sắp chiếu</button>
            <button class="filter-btn" onclick="filterMovies('ngungchieu')">Ngừng chiếu</button>
        </div>
    </div>
</section>

<!-- Movies Section -->
<section class="section">
    <div class="container">
        <div class="row" id="moviesContainer">
            @foreach (var movie in Model)
            {
                <div class="col-lg-4 col-md-6 movie-item" data-status="@movie.Status">
                    <div class="movie-card reveal">
                        <img src="@(!string.IsNullOrEmpty(movie.PosterUrl) ? movie.PosterUrl : "https://via.placeholder.com/300x450/ff6b35/ffffff?text=Movie")" alt="@movie.Title" class="movie-poster" loading="lazy">
                        <div class="movie-info">
                            <h3 class="movie-title">@movie.Title</h3>
                            <p class="movie-genre">@movie.Genre</p>
                            <span class="movie-status status-@movie.Status">
                                @(movie.Status == "dangchieu" ? "Đang chiếu" : 
                                  movie.Status == "sapchieu" ? "Sắp chiếu" : "Ngừng chiếu")
                            </span>
                            <div class="rating">
                                <div class="stars">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                </div>
                                <span>@(movie.Duration?.ToString() ?? "") phút</span>
                            </div>
                            @if (movie.Status == "dangchieu")
                            {
                                <a href="@Url.Action("SelectShowtime", "Booking", new { movieId = movie.MovieId })" class="book-btn" style="text-decoration: none; display: block;">
                                    <i class="fas fa-ticket-alt me-2"></i>Đặt Vé
                                </a>
                            }
                            else if (movie.Status == "sapchieu")
                            {
                                <button class="book-btn" style="background: #6c757d; cursor: not-allowed;" disabled>
                                    <i class="fas fa-clock me-2"></i>Sắp Chiếu
                                </button>
                            }
                            else
                            {
                                <button class="book-btn" style="background: #dc3545; cursor: not-allowed;" disabled>
                                    <i class="fas fa-ban me-2"></i>Ngừng Chiếu
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@section Scripts {
    <script>
        // theme toggle with persistence
        (function(){
            const body = document.body; const icon = document.getElementById('theme-icon'); const btn = document.getElementById('themeToggleBtn');
            const saved = localStorage.getItem('theme');
            if(saved === 'dark'){ body.setAttribute('data-theme','dark'); if(icon) icon.className='fas fa-sun'; }
            else if(saved === 'light'){ body.removeAttribute('data-theme'); if(icon) icon.className='fas fa-moon'; }
            if(btn){ btn.addEventListener('click', function(){ const dark = body.getAttribute('data-theme') === 'dark'; if(dark){ body.removeAttribute('data-theme'); localStorage.setItem('theme','light'); if(icon) icon.className='fas fa-moon'; } else { body.setAttribute('data-theme','dark'); localStorage.setItem('theme','dark'); if(icon) icon.className='fas fa-sun'; } }); }
        })();
        // Login form handling
        const loginForm = document.getElementById('loginForm');
        if(loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                const rememberMe = document.getElementById('rememberMe').checked;
                
                const button = this.querySelector('button[type="submit"]');
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="loading"></span> Đang xử lý...';
                button.disabled = true;
                
                try {
                    const response = await fetch('@Url.Action("Login", "Home", new { area = "Guest" })', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            username: username,
                            password: password,
                            rememberMe: rememberMe
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Hiển thị thông báo thành công
                        Swal.fire({
                            html: `
                                <div class="mt-3">
                                    <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                                    </lord-icon>
                                    <div class="mt-4 pt-2 fs-15">
                                        <h4>${result.message}</h4>
                                        <p class="text-muted mx-4 mb-0">${result.message}</p>
                                    </div>
                                </div>
                            `,
                            showConfirmButton: true,
                            confirmButtonText: 'Ok',
                            confirmButtonColor: '#0ab39c',
                            allowOutsideClick: true,
                            allowEscapeKey: true,
                            customClass: {
                                popup: 'swal2-custom-popup',
                                confirmButton: 'btn btn-primary w-xs mb-1'
                            }
                        }).then(() => {
                            // Đóng modal
                            const modal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));
                            if (modal) modal.hide();
                            
                            // Cập nhật UI ngay lập tức nếu có user data
                            if (result.user) {
                                // Kiểm tra trạng thái user
                                if (result.user.status === 'hoatdong') {
                                    updateUIAfterLogin(result.user);
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Lỗi!',
                                        text: 'Tài khoản không hoạt động',
                                        confirmButtonText: 'Đóng',
                                        confirmButtonColor: '#dc3545',
                                        allowOutsideClick: true,
                                        allowEscapeKey: true
                                    });
                                    return;
                                }
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: result.message,
                            confirmButtonText: 'Đóng',
                            confirmButtonColor: '#dc3545',
                            allowOutsideClick: true,
                            allowEscapeKey: true
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Có lỗi xảy ra khi đăng nhập',
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                } finally {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }
            });
        }
        
        // Register form handling
        const registerForm = document.getElementById('registerForm');
        if(registerForm) {
            registerForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const username = document.getElementById('regUsername').value;
                const email = document.getElementById('regEmail').value;
                const phone = document.getElementById('regPhone').value;
                const password = document.getElementById('regPassword').value;
                const confirmPassword = document.getElementById('regConfirmPassword').value;
                
                // Validation
                if (password !== confirmPassword) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Mật khẩu xác nhận không khớp',
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                    return;
                }
                
                const button = this.querySelector('button[type="submit"]');
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="loading"></span> Đang xử lý...';
                button.disabled = true;
                
                try {
                    const response = await fetch('@Url.Action("Register", "Home", new { area = "Guest" })', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            username: username,
                            email: email,
                            phone: phone,
                            password: password,
                            confirmPassword: confirmPassword
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        Swal.fire({
                            html: `
                                <div class="mt-3">
                                    <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                                    </lord-icon>
                                    <div class="mt-4 pt-2 fs-15">
                                        <h4>${result.message}</h4>
                                        <p class="text-muted mx-4 mb-0">${result.message}</p>
                                    </div>
                                </div>
                            `,
                            showConfirmButton: true,
                            confirmButtonText: 'Ok',
                            confirmButtonColor: '#0ab39c',
                            allowOutsideClick: true,
                            allowEscapeKey: true,
                            customClass: {
                                popup: 'swal2-custom-popup',
                                confirmButton: 'btn btn-primary w-xs mb-1'
                            }
                        }).then(() => {
                            // Chuyển về form đăng nhập
                            showLoginForm();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: result.message,
                            confirmButtonText: 'Đóng',
                            confirmButtonColor: '#dc3545',
                            allowOutsideClick: true,
                            allowEscapeKey: true
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Có lỗi xảy ra khi đăng ký',
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                } finally {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }
            });
        }
        
        // Helper functions
        function showLoginForm() {
            const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
            const registerModal = bootstrap.Modal.getInstance(document.getElementById('registerModal'));
            if (registerModal) registerModal.hide();
            loginModal.show();
        }
        
        function showRegisterForm() {
            const registerModal = new bootstrap.Modal(document.getElementById('registerModal'));
            const loginModal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));
            if (loginModal) loginModal.hide();
            registerModal.show();
        }
        
        function showNotification(message, type) {
            if (type === 'success') {
                Swal.fire({
                    html: `
                        <div class="mt-3">
                            <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                            </lord-icon>
                            <div class="mt-4 pt-2 fs-15">
                                <h4>${message}</h4>
                                <p class="text-muted mx-4 mb-0">${message}</p>
                            </div>
                        </div>
                    `,
                    showConfirmButton: true,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: '#0ab39c',
                    allowOutsideClick: true,
                    allowEscapeKey: true,
                    customClass: {
                        popup: 'swal2-custom-popup',
                        confirmButton: 'btn btn-primary w-xs mb-1'
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: message,
                    confirmButtonText: 'Đóng',
                    confirmButtonColor: '#dc3545',
                    allowOutsideClick: true,
                    allowEscapeKey: true
                });
            }
        }
        
        async function logout() {
            try {
                const response = await fetch('@Url.Action("Logout", "Home", new { area = "Guest" })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Swal.fire({
                        html: `
                            <div class="mt-3">
                                <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                                </lord-icon>
                                <div class="mt-4 pt-2 fs-15">
                                    <h4>${result.message}</h4>
                                    <p class="text-muted mx-4 mb-0">${result.message}</p>
                                </div>
                            </div>
                        `,
                        showConfirmButton: true,
                        confirmButtonText: 'Ok',
                        confirmButtonColor: '#0ab39c',
                        allowOutsideClick: true,
                        allowEscapeKey: true,
                        customClass: {
                            popup: 'swal2-custom-popup',
                            confirmButton: 'btn btn-primary w-xs mb-1'
                        }
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: result.message,
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Có lỗi xảy ra khi đăng xuất',
                    confirmButtonText: 'Đóng',
                    confirmButtonColor: '#dc3545',
                    allowOutsideClick: true,
                    allowEscapeKey: true
                });
            }
        }
        
        function showLoginModal() {
            const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
            loginModal.show();
        }
        
        // Function để cập nhật UI sau khi đăng nhập thành công
        function updateUIAfterLogin(userData) {
            const navbar = document.querySelector('.navbar');
            const loginButton = navbar.querySelector('.login-button');
            
            if (loginButton) {
                // Thay thế nút đăng nhập bằng thông tin user trong navbar
                const userInfoHTML = `
                    <div class="user-nav-section ms-3 d-flex align-items-center">
                        <div class="user-info me-3">
                            <div class="user-greeting-nav fw-bold">Xin chào, ${userData.username}!</div>
                            <div class="user-role-nav small">${userData.role === 'Admin' ? 'Quản trị viên' : 'Khách hàng'}</div>
                        </div>
                        <div class="user-actions-nav d-flex align-items-center gap-2">
                            ${userData.role === 'Admin' ? 
                                '<a href="/Admin/Home" class="btn btn-warning"><i class="fas fa-gauge-high me-1"></i>Admin</a>' : 
                                ''
                            }
                            <button onclick="logout()" class="btn btn-outline-secondary">
                                <i class="fas fa-sign-out-alt me-1"></i>Đăng Xuất
                            </button>
                        </div>
                    </div>
                `;
                
                loginButton.outerHTML = userInfoHTML;
            }
        }
        // reveal animation
        function revealOnScroll(){ const els=document.querySelectorAll('.reveal'); els.forEach(el=>{ const wh=window.innerHeight; const top=el.getBoundingClientRect().top; if(top<wh-150){ el.classList.add('active'); } }); }
        window.addEventListener('scroll', revealOnScroll); 
        window.addEventListener('load', function() {
            revealOnScroll();
            // Kiểm tra trạng thái đăng nhập khi trang load
            checkLoginStatus();
        });
        
        // Function để kiểm tra trạng thái đăng nhập
        async function checkLoginStatus() {
            try {
                const response = await fetch('@Url.Action("GetCurrentUser", "Home", new { area = "Guest" })');
                const result = await response.json();
                
                if (result.success && result.isLoggedIn && result.user) {
                    console.log('User is logged in:', result.user);
                    // Kiểm tra trạng thái user trước khi cập nhật UI
                    if (result.user.status === 'hoatdong') {
                        updateUIAfterLogin(result.user);
                    } else {
                        console.log('User account is not active');
                        // Nếu tài khoản không hoạt động, logout
                        await logout();
                    }
                } else {
                    console.log('User is not logged in');
                }
            } catch (error) {
                console.log('Error checking login status:', error);
            }
        }
        // book
        function bookMovie(movieTitle) {
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '<span class="loading"></span> Đang xử lý...';
            button.disabled = true;
            
            setTimeout(() => {
                Swal.fire({
                    html: `
                        <div class="mt-3">
                            <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                            </lord-icon>
                            <div class="mt-4 pt-2 fs-15">
                                <h4>Đặt vé thành công!</h4>
                                <p class="text-muted mx-4 mb-0">Bạn đã chọn đặt vé cho phim: "${movieTitle}"<br>Vui lòng chọn suất chiếu và ghế ngồi!</p>
                            </div>
                        </div>
                    `,
                    showConfirmButton: true,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: '#0ab39c',
                    allowOutsideClick: true,
                    allowEscapeKey: true,
                    customClass: {
                        popup: 'swal2-custom-popup',
                        confirmButton: 'btn btn-primary w-xs mb-1'
                    }
                });
                
                button.innerHTML = originalText;
                button.disabled = false;
            }, 800);
        }
    </script>
    <script>
        // Filter movies
        function filterMovies(status) {
            const movieItems = document.querySelectorAll('.movie-item');
            const filterBtns = document.querySelectorAll('.filter-btn');
            
            // Update active button
            filterBtns.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Filter movies
            movieItems.forEach(item => {
                if (status === 'all' || item.dataset.status === status) {
                    item.style.display = 'block';
                    item.classList.add('active');
                } else {
                    item.style.display = 'none';
                    item.classList.remove('active');
                }
            });
        }
        

        
        // Reveal animation
        function revealOnScroll() {
            const els = document.querySelectorAll('.reveal');
            els.forEach(el => {
                const wh = window.innerHeight;
                const top = el.getBoundingClientRect().top;
                if (top < wh - 150) {
                    el.classList.add('active');
                }
            });
        }
        
        window.addEventListener('scroll', revealOnScroll);
        window.addEventListener('load', revealOnScroll);
    </script>
} 
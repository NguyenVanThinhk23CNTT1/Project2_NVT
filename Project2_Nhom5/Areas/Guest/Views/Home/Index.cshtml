@model Project2_Nhom5.Areas.Guest.Models.GuestHomeViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Trang chủ";
    var isAdmin = (bool)(ViewData["IsAdmin"] ?? false);
}

@section Styles {
    <style>
        :root { --primary-color: #ff6b35; --secondary-color: #1a1a2e; --accent-color: #16213e; --text-primary: #333; --text-secondary: #666; --footer-text: #666; --bg-primary: #ffffff; --bg-secondary: #f8f9fa; --card-bg: #ffffff; --border-color: #e0e0e0; --shadow: 0 4px 20px rgba(0,0,0,0.1); --gradient: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%); }
        [data-theme="dark"] { --text-primary: #ffffff; --text-secondary: #b0b0b0; --footer-text: #b0b0b0; --bg-primary: #0f0f1a; --bg-secondary: #1a1a2e; --card-bg: #16213e; --border-color: #333; --shadow: 0 4px 20px rgba(0,0,0,0.3); }
        [data-theme="dark"] .form-control, [data-theme="dark"] .form-select { background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary); }
        [data-theme="dark"] .form-control:focus, [data-theme="dark"] .form-select:focus { background-color: var(--card-bg); border-color: var(--primary-color); color: var(--text-primary); box-shadow: 0 0 0 0.2rem rgba(255, 107, 53, 0.25); }
        [data-theme="dark"] .form-control::placeholder { color: var(--text-secondary); }
        [data-theme="dark"] .modal-backdrop { background-color: rgba(0, 0, 0, 0.8); }
        * { transition: all 0.3s ease; }
        .hero-section { background: var(--bg-primary); min-height: 70vh; display: flex; align-items: center; position: relative; overflow: hidden; }
        .hero-title { font-size: 3rem; font-weight: bold; margin-bottom: 1.5rem; background: var(--gradient); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; }
        .hero-subtitle { font-size: 1.2rem; color: var(--text-secondary); margin-bottom: 2rem; }
        .cta-button { background: var(--gradient); border: none; padding: 12px 32px; border-radius: 50px; color: white; font-size: 1rem; font-weight: 600; text-decoration: none; display: inline-block; box-shadow: var(--shadow); }
        .cta-button:hover { transform: translateY(-3px); box-shadow: 0 8px 30px rgba(255, 107, 53, 0.4); color: white; }
        .movie-card { background: var(--card-bg); border-radius: 20px; overflow: hidden; box-shadow: var(--shadow); border: 1px solid var(--border-color); position: relative; }
        .movie-card:hover { transform: translateY(-6px); box-shadow: 0 20px 40px rgba(0,0,0,0.15); }
        .movie-poster { width: 100%; height: 350px; object-fit: cover; }
        .movie-info { padding: 1.2rem; display: flex; flex-direction: column; height: 100%; }
        .movie-title { font-size: 1.2rem; font-weight: bold; margin-bottom: 0.5rem; color: var(--text-primary); }
        .movie-genre { color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 0.5rem; }
        .rating { display: flex; align-items: center; margin-bottom: 1rem; }
        .stars { color: #ffc107; margin-right: 0.5rem; }
        .book-btn { background: var(--gradient); border: none; padding: 10px 25px; border-radius: 25px; color: white; font-weight: 500; width: 100%; margin-top: auto; }
        .loading { vertical-align: middle; margin-right: 3px; display: inline-block; width: 20px; height: 20px; border: 3px solid rgba(255,255,255,.3); border-radius: 50%; border-top-color: #fff; animation: spin 1s ease-in-out infinite; }
        @@keyframes spin { to { transform: rotate(360deg); } }
        .reveal { opacity: 0; transform: translateY(30px); transition: all 0.6s ease; }
        .reveal.active { opacity: 1; transform: translateY(0); }
        .login-image-container { position: relative; height: 100%; min-height: 300px; overflow: hidden; border-radius: 15px; }
        .login-image { width: 100%; height: 100%; object-fit: cover; }
        .login-overlay { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(135deg, rgba(255, 107, 53, 0.8) 0%, rgba(247, 147, 30, 0.8) 100%); display: flex; align-items: center; justify-content: center; }
        .login-form-container { padding: 2rem; }
        .login-title { font-size: 2rem; font-weight: bold; color: var(--text-primary); margin-bottom: 0.5rem; }
        .login-subtitle { color: var(--text-secondary); margin-bottom: 2rem; }
        .login-input { border-radius: 10px; border: 2px solid var(--border-color); padding: 12px 15px; transition: all 0.3s ease; }
        .login-input:focus { border-color: var(--primary-color); box-shadow: 0 0 0 0.2rem rgba(255, 107, 53, 0.25); }
        .login-btn { border-radius: 10px; padding: 12px; font-weight: 600; transition: all 0.3s ease; }
        .login-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
        .login-btn-hero { background: var(--gradient); border: none; padding: 12px 24px; border-radius: 25px; font-weight: 600; transition: all 0.3s ease; }
        .login-btn-hero:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4); color: white; }
        
        /* Back Button Styles */
        .back-btn {
            background: linear-gradient(135deg, rgba(255, 107, 53, 0.95) 0%, rgba(247, 147, 30, 0.95) 100%);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 14px 24px;
            border-radius: 30px;
            font-weight: 700;
            font-size: 15px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 6px 20px rgba(255, 107, 53, 0.4);
            backdrop-filter: blur(15px);
            text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 140px;
            position: relative;
            overflow: hidden;
        }
        
        .back-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }
        
        .back-btn:hover::before {
            left: 100%;
        }
        
        .back-btn:hover {
            background: linear-gradient(135deg, rgba(255, 107, 53, 1) 0%, rgba(247, 147, 30, 1) 100%);
            transform: translateY(-3px) scale(1.08);
            box-shadow: 0 10px 30px rgba(255, 107, 53, 0.6);
            border-color: rgba(255, 255, 255, 0.6);
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
        }
        
        .back-btn i {
            font-size: 16px;
            margin-right: 8px;
            transition: all 0.3s ease;
            display: inline-block;
        }
        
        .back-btn:hover i {
            transform: translateX(-3px);
            animation: bounceLeft 0.6s ease-in-out;
        }
        
        @@keyframes bounceLeft {
            0%, 20%, 50%, 80%, 100% {
                transform: translateX(-3px);
            }
            40% {
                transform: translateX(-6px);
            }
            60% {
                transform: translateX(-4px);
            }
        }
        
        .back-btn:active {
            transform: translateY(-1px) scale(1.02);
            box-shadow: 0 5px 15px rgba(255, 107, 53, 0.5);
        }
        
        /* Demo button để so sánh */
        .demo-section {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        
        .demo-section h6 {
            color: white;
            margin-bottom: 15px;
            font-size: 14px;
        }
        
        .demo-old-btn {
            background: white;
            color: black;
            border: 1px solid #ccc;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 14px;
            margin-bottom: 10px;
            display: block;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        
        .demo-old-btn:hover {
            background: #f8f9fa;
            color: black;
            text-decoration: none;
        }
        
        /* Trailer Section Styles */
        .trailer-section { background: var(--bg-primary); padding: 4rem 0; }
        .trailer-player { position: relative; background: var(--card-bg); border-radius: 20px; overflow: hidden; box-shadow: var(--shadow); border: 1px solid var(--border-color); }
        
        /* Enhanced Slideshow Styles - Full Width */
        .trailer-slideshow { 
            position: relative; 
            height: 600px; 
            overflow: hidden; 
            border-radius: 25px; 
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
            background: #000; /* Solid black background to prevent purple showing */
        }
        .trailer-slide { 
            position: absolute; 
            top: 0; 
            left: 0; 
            width: 100%; 
            height: 100%; 
            opacity: 0; 
            transition: all 0.6s ease-in-out; 
            transform: translateX(100%); 
            z-index: 1;
        }
        .trailer-slide.active { 
            opacity: 1; 
            transform: translateX(0); 
            z-index: 2;
        }
        .trailer-slide.prev { 
            transform: translateX(-100%); 
            z-index: 0;
        }
        .trailer-slide-bg { 
            width: 100%; 
            height: 100%; 
            background-size: cover; 
            background-position: center; 
            background-repeat: no-repeat; 
            position: relative;
            filter: brightness(0.8) contrast(1.1);
            transition: transform 0.6s ease-in-out;
        }
        .trailer-slide:hover .trailer-slide-bg {
            transform: scale(1.05);
        }
        .trailer-slide-overlay { 
            position: absolute; 
            top: 0; 
            left: 0; 
            right: 0; 
            bottom: 0; 
            background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.6) 100%); 
            display: flex; 
            align-items: center; 
            justify-content: center; 
        }
        .trailer-slide-content { 
            text-align: center; 
            color: white; 
            padding: 4rem; 
            max-width: 900px; 
            animation: slideInUp 0.8s ease-out;
        }
        .trailer-slide-title { 
            font-size: 4rem; 
            font-weight: 800; 
            margin-bottom: 1.5rem; 
            text-shadow: 3px 3px 6px rgba(0,0,0,0.8);
            background: linear-gradient(45deg, #fff, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            letter-spacing: -1px;
        }
        .trailer-slide-description { 
            font-size: 1.6rem; 
            margin-bottom: 2.5rem; 
            opacity: 0.95; 
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            line-height: 1.6;
            font-weight: 300;
        }
        .trailer-slide-info { 
            margin-bottom: 3rem; 
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
        }
        .trailer-slide-genre { 
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            padding: 1rem 2rem; 
            border-radius: 30px; 
            font-weight: 700; 
            font-size: 1.2rem;
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
            border: 2px solid rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
        }
        .trailer-slide-duration { 
            background: rgba(255,255,255,0.15); 
            padding: 1rem 2rem; 
            border-radius: 30px; 
            font-weight: 700; 
            font-size: 1.2rem;
            border: 2px solid rgba(255,255,255,0.3);
            backdrop-filter: blur(10px);
        }
        .trailer-slide-play-btn { 
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            border-radius: 50%; 
            width: 120px; 
            height: 120px; 
            display: flex; 
            flex-direction: column; 
            align-items: center; 
            justify-content: center; 
            cursor: pointer; 
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1); 
            margin: 0 auto; 
            box-shadow: 0 15px 40px rgba(255, 107, 53, 0.6);
            border: 3px solid rgba(255,255,255,0.3);
            backdrop-filter: blur(10px);
        }
        .trailer-slide-play-btn:hover { 
            transform: scale(1.15) translateY(-5px); 
            box-shadow: 0 20px 50px rgba(255, 107, 53, 0.8);
            border-color: rgba(255,255,255,0.5);
        }
        .trailer-slide-play-btn i { 
            color: white; 
            margin-bottom: 0.5rem; 
            font-size: 2.5rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        .trailer-slide-play-btn span { 
            color: white; 
            font-weight: 700; 
            font-size: 1rem;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }
        
        /* Animation keyframes */
        @@keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Bottom Navigation Styles */
        .trailer-bottom-nav {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            align-items: center;
            gap: 2rem;
            z-index: 10;
        }
        
        .nav-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, rgba(0,0,0,0.9), rgba(30,30,30,0.9));
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(15px);
            font-size: 16px;
            position: relative;
            overflow: hidden;
        }
        
        .nav-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }
        
        .nav-btn:hover::before {
            left: 100%;
        }
        
        .nav-btn:hover {
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            border-color: rgba(255,255,255,0.6);
            transform: scale(1.15) translateY(-3px);
            box-shadow: 0 15px 35px rgba(255, 107, 53, 0.4);
        }
        
        .nav-btn:active {
            transform: scale(1.05) translateY(-1px);
        }
        
        .prev-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
        }
        
        .prev-btn:hover {
            background: linear-gradient(135deg, #764ba2, #667eea);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        }
        
        .next-btn {
            background: linear-gradient(135deg, #f093fb, #f5576c);
        }
        
        .next-btn:hover {
            background: linear-gradient(135deg, #f5576c, #f093fb);
            box-shadow: 0 15px 35px rgba(245, 87, 108, 0.4);
        }
        
        .slide-indicators {
            display: flex;
            gap: 0.8rem;
            background: rgba(0,0,0,0.7);
            padding: 0.8rem 1.5rem;
            border-radius: 30px;
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .slide-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: rgba(255,255,255,0.4);
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .slide-indicator.active {
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            transform: scale(1.3);
            border-color: rgba(255,255,255,0.3);
            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.5);
        }
        
        .slide-indicator:hover {
            background: rgba(255,255,255,0.7);
            transform: scale(1.1);
        }
        
        .trailer-play-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 10;
        }
        
        .play-toggle-btn {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
            font-size: 14px;
        }
        
        .play-toggle-btn:hover {
            background: linear-gradient(135deg, #f7931e, #ff6b35);
            transform: scale(1.1);
            box-shadow: 0 12px 35px rgba(255, 107, 53, 0.6);
        }
        
        .auto-play-enable {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 10;
        }
        
        .enable-auto-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(15px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 600;
            font-size: 14px;
        }
        
        .enable-auto-btn:hover {
            background: linear-gradient(135deg, #764ba2, #667eea);
            transform: scale(1.05) translateY(-2px);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.6);
        }
        
        .enable-auto-btn i {
            font-size: 16px;
        }
        
        /* Hide old controls */
        .trailer-controls { 
            display: none;
        }
        .trailer-nav-dots { 
            display: flex; 
            gap: 0.5rem; 
        }
        .nav-dot { 
            width: 10px; 
            height: 10px; 
            border-radius: 50%; 
            background: rgba(255,255,255,0.4); 
            cursor: pointer; 
            transition: all 0.3s ease;
            border: 1px solid transparent;
        }
        .nav-dot.active { 
            background: linear-gradient(135deg, #ff6b35, #f7931e); 
            transform: scale(1.2); 
            border-color: rgba(255,255,255,0.3);
            box-shadow: 0 2px 8px rgba(255, 107, 53, 0.4);
        }
        .nav-dot:hover { 
            background: rgba(255,255,255,0.6); 
            transform: scale(1.1);
        }
        .trailer-control-buttons { 
            display: flex; 
            gap: 0.5rem; 
        }
        .control-btn { 
            background: rgba(255,255,255,0.15); 
            border: 1px solid rgba(255,255,255,0.2); 
            color: white; 
            width: 36px; 
            height: 36px; 
            border-radius: 50%; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            cursor: pointer; 
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            font-size: 12px;
        }
        .control-btn:hover { 
            background: rgba(255,255,255,0.25); 
            transform: scale(1.1);
            border-color: rgba(255,255,255,0.4);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        .play-pause-btn { 
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            border-color: rgba(255,255,255,0.3);
            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.4);
        }
        .play-pause-btn:hover {
            background: linear-gradient(135deg, #f7931e, #ff6b35);
            box-shadow: 0 6px 20px rgba(255, 107, 53, 0.6);
        }
        
        /* Enhanced Video Container Styles */
        .trailer-video-container {
            position: relative;
            width: 100%;
            height: 600px;
            background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
            border-radius: 25px;
            overflow: hidden;
            box-shadow: 0 30px 60px rgba(0,0,0,0.4);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid rgba(255,255,255,0.1);
        }
        
        .trailer-video-container:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 40px 80px rgba(0,0,0,0.5);
            border-color: rgba(255,255,255,0.2);
        }
        
        /* Enhanced Controls */
        .trailer-video-container .controls-container {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            z-index: 10;
            background: linear-gradient(to bottom, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.2) 70%, transparent 100%);
            padding: 25px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
        }
        
        .trailer-video-container:hover .controls-container {
            opacity: 1;
            transform: translateY(0);
        }
        
        /* Enhanced Button Styles */
        .trailer-video-container button {
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            font-size: 14px;
            padding: 12px 24px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        .trailer-video-container button:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 12px 35px rgba(0,0,0,0.3);
        }
        
        .trailer-video-container button:active {
            transform: translateY(-1px) scale(1.02);
        }
        
        /* Enhanced Responsive Design */
        @@media (max-width: 1200px) {
            .trailer-slideshow { height: 550px; }
            .trailer-slide-title { font-size: 3.5rem; }
            .trailer-slide-description { font-size: 1.4rem; }
        }
        
        @@media (max-width: 768px) {
            .trailer-slideshow { height: 450px; }
            .trailer-slide-title { font-size: 2.8rem; }
            .trailer-slide-description { font-size: 1.2rem; }
            .trailer-slide-content { padding: 2.5rem; }
            .trailer-slide-play-btn { width: 100px; height: 100px; }
            .trailer-slide-play-btn i { font-size: 2.2rem; }
            .trailer-slide-play-btn span { font-size: 0.9rem; }
            .trailer-bottom-nav {
                gap: 1.5rem;
                bottom: 15px;
            }
            .nav-btn {
                width: 45px;
                height: 45px;
                font-size: 14px;
            }
            .slide-indicators {
                padding: 0.6rem 1.2rem;
                gap: 0.6rem;
            }
            .slide-indicator {
                width: 10px;
                height: 10px;
            }
            .play-toggle-btn {
                width: 40px;
                height: 40px;
                font-size: 12px;
            }
            .trailer-slide-info { 
                flex-direction: column; 
                align-items: center; 
                gap: 0.8rem; 
            }
            .trailer-slide-genre, .trailer-slide-duration { 
                font-size: 1rem; 
                padding: 0.8rem 1.5rem; 
            }
            .trailer-video-container {
                height: 400px;
            }
            .trailer-video-container .controls-container {
                padding: 20px;
            }
            .trailer-video-container button {
                padding: 10px 20px;
                font-size: 13px;
            }
        }
        
        @@media (max-width: 576px) {
            .trailer-slideshow { height: 400px; }
            .trailer-slide-title { font-size: 2.2rem; }
            .trailer-slide-description { font-size: 1rem; }
            .trailer-slide-content { padding: 2rem; }
            .trailer-slide-play-btn { width: 90px; height: 90px; }
            .trailer-slide-play-btn i { font-size: 2rem; }
            .trailer-slide-play-btn span { font-size: 0.8rem; }
            .trailer-slide-genre, .trailer-slide-duration { 
                font-size: 0.9rem; 
                padding: 0.6rem 1.2rem; 
            }
            .trailer-bottom-nav {
                gap: 1rem;
                bottom: 10px;
            }
            .nav-btn { 
                width: 40px; 
                height: 40px; 
                font-size: 12px;
            }
            .slide-indicators {
                padding: 0.5rem 1rem;
                gap: 0.5rem;
            }
            .slide-indicator { 
                width: 8px; 
                height: 8px; 
            }
            .play-toggle-btn {
                width: 35px;
                height: 35px;
                font-size: 10px;
            }
            .trailer-video-container {
                height: 350px;
            }
        }
        
        @@media (max-width: 400px) {
            .trailer-slideshow { height: 350px; }
            .trailer-slide-title { font-size: 1.8rem; }
            .trailer-slide-description { font-size: 0.9rem; }
            .trailer-slide-content { padding: 1.5rem; }
            .trailer-slide-play-btn { width: 80px; height: 80px; }
            .trailer-slide-play-btn i { font-size: 1.8rem; }
            .trailer-slide-play-btn span { font-size: 0.7rem; }
            .trailer-video-container {
                height: 300px;
            }
        }
        .play-pause-btn:hover { background: var(--gradient); transform: scale(1.1); }
        
        .trailer-video { width: 100%; height: 400px; border-radius: 20px; }
        .trailer-sidebar { background: var(--card-bg); border-radius: 20px; padding: 2rem; box-shadow: var(--shadow); border: 1px solid var(--border-color); }
        .trailer-list { max-height: 500px; overflow-y: auto; }
        .trailer-item { display: flex; align-items: center; padding: 1rem; border-radius: 15px; margin-bottom: 1rem; cursor: pointer; transition: all 0.3s ease; border: 1px solid var(--border-color); }
        .trailer-item:hover { background: var(--bg-secondary); transform: translateX(5px); }
        .trailer-item.active { background: var(--gradient); color: white; }
        .trailer-thumbnail { position: relative; width: 80px; height: 60px; margin-right: 1rem; border-radius: 10px; overflow: hidden; }
        .trailer-thumbnail img { width: 100%; height: 100%; object-fit: cover; }
        .play-overlay { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; color: white; opacity: 0; transition: all 0.3s ease; }
        .trailer-item:hover .play-overlay { opacity: 1; }
        .trailer-details { flex: 1; }
        .trailer-title { font-size: 0.9rem; font-weight: bold; margin-bottom: 0.25rem; color: var(--text-primary); }
        .trailer-genre { font-size: 0.8rem; color: var(--text-secondary); margin-bottom: 0.25rem; }
        .trailer-rating { font-size: 0.8rem; color: var(--text-secondary); }
        .trailer-card { background: var(--card-bg); border-radius: 20px; overflow: hidden; box-shadow: var(--shadow); border: 1px solid var(--border-color); cursor: pointer; transition: all 0.3s ease; }
        .trailer-card:hover { transform: translateY(-8px); box-shadow: 0 20px 40px rgba(0,0,0,0.15); }
        .trailer-card-image { position: relative; height: 200px; overflow: hidden; }
        .trailer-card-image img { width: 100%; height: 100%; object-fit: cover; transition: all 0.3s ease; }
        .trailer-card:hover .trailer-card-image img { transform: scale(1.05); }
        .trailer-card-overlay { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.6); display: flex; align-items: center; justify-content: center; opacity: 0; transition: all 0.3s ease; }
        .trailer-card:hover .trailer-card-overlay { opacity: 1; }
        .play-icon { color: white; margin-bottom: 1rem; }
        .trailer-duration { position: absolute; top: 10px; right: 10px; background: rgba(0,0,0,0.8); color: white; padding: 0.25rem 0.5rem; border-radius: 5px; font-size: 0.8rem; }
        .trailer-card-content { padding: 1.5rem; }
        .trailer-card-title { font-size: 1.1rem; font-weight: bold; margin-bottom: 0.5rem; color: var(--text-primary); }
        .trailer-card-genre { color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 1rem; }
        .trailer-card-actions { text-align: center; }
        
        /* Responsive Styles - Full Width */
        @@media (max-width: 768px) {
            .trailer-slideshow { height: 400px; }
            .trailer-slide-title { font-size: 2.5rem; }
            .trailer-slide-description { font-size: 1.2rem; }
            .trailer-slide-content { padding: 2rem; }
            .trailer-slide-play-btn { width: 80px; height: 80px; }
            .trailer-slide-play-btn i { font-size: 2rem; }
            .trailer-slide-play-btn span { font-size: 0.8rem; }
            .trailer-controls { flex-direction: column; gap: 1rem; padding: 1rem; }
            .trailer-control-buttons { order: 1; }
            .trailer-nav-dots { order: 2; }
        }
        
        @@media (max-width: 576px) {
            .trailer-slideshow { height: 350px; }
            .trailer-slide-title { font-size: 2rem; }
            .trailer-slide-description { font-size: 1rem; }
            .trailer-slide-content { padding: 1.5rem; }
            .trailer-slide-play-btn { width: 70px; height: 70px; }
            .trailer-slide-play-btn i { font-size: 1.5rem; }
            .trailer-slide-play-btn span { font-size: 0.7rem; }
            .trailer-slide-genre, .trailer-slide-duration { font-size: 0.9rem; padding: 0.5rem 1rem; }
        }
    </style>
}

<!-- Trailer Section -->
<section id="trailers" class="trailer-section">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h2 class="section-title reveal text-center mb-5">
                    <i class="fas fa-play-circle me-3"></i>Trailer Phim Hot
                </h2>
            </div>
        </div>
        
        <!-- Main Trailer Player - Full Width -->
        <div class="row mb-5">
            <div class="col-12">
                <div class="main-trailer-container reveal">
                    <div class="trailer-player">
                        <!-- Auto-play Slideshow -->
                        <div class="trailer-slideshow" id="trailerSlideshow">
                            @{
                                var autoPlayMovies = Model.NowShowing.Take(5).ToList();
                                
                                // Debug: Log số lượng phim và chi tiết
                                <script>
                                    console.log('Number of movies in NowShowing:', @Model.NowShowing.Count);
                                    @foreach (var movie in Model.NowShowing.Take(5))
                                    {
                                        <text>console.log('DB Movie: @movie.Title (ID: @movie.MovieId)');</text>
                                    }
                                </script>
                                
                                // Đảm bảo không có phim trùng lặp theo MovieId và Title
                                autoPlayMovies = autoPlayMovies.GroupBy(m => m.MovieId).Select(g => g.First()).ToList();
                                // Nếu vẫn có trùng lặp theo title, loại bỏ thêm
                                autoPlayMovies = autoPlayMovies.GroupBy(m => m.Title).Select(g => g.First()).ToList();
                                
                                // Debug: Log sau khi loại bỏ trùng lặp
                                <script>
                                    console.log('After deduplication:', @autoPlayMovies.Count);
                                    @foreach (var movie in autoPlayMovies)
                                    {
                                        <text>console.log('Unique Movie: @movie.Title (ID: @movie.MovieId)');</text>
                                    }
                                </script>
                                
                                // Nếu không đủ phim hoặc chỉ có 1 phim, tạo dữ liệu mẫu
                                if (autoPlayMovies.Count < 2)
                                {
                                    // Tạo ít nhất 2 slide với dữ liệu mẫu
                                    var sampleMovies = new List<Project2_Nhom5.Models.Movie>
                                    {
                                        new Project2_Nhom5.Models.Movie { MovieId = 1, Title = "Avengers: Endgame", Description = "Một đỉnh cao của 22 bộ phim liên kết", Genre = "Hành động, Khoa học viễn tưởng", Duration = 181, PosterUrl = "", TrailerUrl = "https://www.youtube.com/embed/TcMBFSGVi1c" },
                                        new Project2_Nhom5.Models.Movie { MovieId = 2, Title = "Spider-Man: No Way Home", Description = "Cuộc phiêu lưu đa vũ trụ của Spider-Man", Genre = "Hành động, Siêu anh hùng", Duration = 148, PosterUrl = "", TrailerUrl = "https://www.youtube.com/embed/JfVOs4VSpmA" }
                                    };
                                    
                                    autoPlayMovies = sampleMovies.Take(2).ToList();
                                }
                                else
                                {
                                    // Chỉ lấy 2 phim đầu tiên để tránh quá nhiều slide
                                    autoPlayMovies = autoPlayMovies.Take(2).ToList();
                                }
                            }
                            @for (int i = 0; i < autoPlayMovies.Count; i++)
                            {
                                var movie = autoPlayMovies[i];
                                // Mỗi phim có trailer URL riêng, không force Avengers cho tất cả
                                var trailerUrl = !string.IsNullOrEmpty(movie.TrailerUrl) ? movie.TrailerUrl : "https://www.youtube.com/embed/TcMBFSGVi1c";
                                
                                // Debug: Log thông tin từng slide
                                <script>console.log('Creating slide @i: @movie.Title (ID: @movie.MovieId) - Trailer: @trailerUrl');</script>
                                
                                <div class="trailer-slide @(i == 0 ? "active" : "")" data-movie-id="@movie.MovieId" data-title="@movie.Title" data-description="@movie.Description" data-trailer-url="@trailerUrl">
                                    <div class="trailer-slide-bg" style="background-image: url('@(!string.IsNullOrEmpty(movie.PosterUrl) ? Url.Content("~/" + movie.PosterUrl) : "https://placehold.co/1200x600/ff6b35/ffffff?text=" + movie.Title)')">
                                        <div class="trailer-slide-overlay">
                                                <div class="trailer-slide-content">
                                                    <h3 class="trailer-slide-title">@movie.Title</h3>
                                                    <p class="trailer-slide-description">@movie.Description</p>
                                                    <div class="trailer-slide-info">
                                                        <span class="trailer-slide-genre">@movie.Genre</span>
                                                        <span class="trailer-slide-duration">@(movie.Duration?.ToString() ?? "") phút</span>
                                                    </div>
                                                    <div class="trailer-slide-play-btn" onclick="playTrailer('main')">
                                                        <i class="fas fa-play fa-3x"></i>
                                                    </div>
                                                </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <!-- Bottom Navigation Buttons -->
                        <div class="trailer-bottom-nav">
                            <button class="nav-btn prev-btn" onclick="previousSlide()" title="Slide trước">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <div class="slide-indicators">
                                @for (int i = 0; i < autoPlayMovies.Count; i++)
                                {
                                    <span class="slide-indicator @(i == 0 ? "active" : "")" onclick="goToSlide(@i)" title="@autoPlayMovies[i].Title"></span>
                                }
                            </div>
                            <button class="nav-btn next-btn" onclick="nextSlide()" title="Slide tiếp">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                        
                        <!-- Play/Pause Toggle -->
                        <div class="trailer-play-toggle">
                            <button class="play-toggle-btn" onclick="toggleSlideshow()" id="playPauseBtn" title="Tạm dừng/Tiếp tục">
                                <i class="fas fa-pause"></i>
                            </button>
                        </div>
                        
                        <!-- Auto-play Enable Button (Shows when auto-play is disabled) -->
                        <!-- <div class="auto-play-enable" id="autoPlayEnable" style="display: none;">
                            <button class="enable-auto-btn" onclick="enableAutoPlay()" title="Bật tự động phát">
                                <i class="fas fa-play-circle"></i>
                                <span>Bật Auto-play</span>
                            </button>
                        </div> -->
                        
                        <!-- Video Player (Hidden by default) -->
                        <video id="mainTrailer" class="trailer-video" controls style="display: none;">
                            <source src="" type="video/mp4">
                            Trình duyệt của bạn không hỗ trợ video.
                        </video>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Trailer Grid -->
        <!-- <div class="row">
            <div class="col-12">
                <h4 class="mb-4">
                    <i class="fas fa-video me-2"></i>Tất Cả Trailer
                </h4>
            </div>
            @foreach (var movie in Model.NowShowing)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="trailer-card reveal" onclick="selectTrailer('@movie.MovieId', '@movie.Title', '@movie.Description', '@movie.TrailerUrl')">
                        <div class="trailer-card-image">
                            <img src="@(!string.IsNullOrEmpty(movie.PosterUrl) ? Url.Content("~/" + movie.PosterUrl) : "https://placehold.co/300x200/ff6b35/ffffff?text=Movie")" alt="@movie.Title" class="img-fluid">
                            <div class="trailer-card-overlay">
                                <div class="play-icon">
                                    <i class="fas fa-play fa-2x"></i>
                                </div>
                                <div class="trailer-duration">
                                    <i class="fas fa-clock me-1"></i>2:30
                                </div>
                            </div>
                        </div>
                        <div class="trailer-card-content">
                            <h5 class="trailer-card-title">@movie.Title</h5>
                            <p class="trailer-card-genre">@movie.Genre</p>
                            <div class="trailer-card-actions">
                                <button class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-ticket-alt me-1"></i>Đặt Vé
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div> -->
    </div>
</section>

<!-- Error Message Display -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="container mt-3">
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<!-- Movies Section -->
<section id="movies" class="section">
    <div class="container">
        <h2 class="section-title reveal">Phim Đang Chiếu</h2>
        <div class="row">
            @foreach (var m in Model.NowShowing)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="movie-card reveal">
                        <img src="@(!string.IsNullOrEmpty(m.PosterUrl) ? Url.Content("~/" + m.PosterUrl) : "https://placehold.co/400x250/ff6b35/ffffff?text=Movie")" alt="@m.Title" class="movie-poster" loading="lazy">
                        <div class="movie-info">
                            <h3 class="movie-title">@m.Title</h3>
                            <p class="movie-genre">@m.Genre</p>
                            <div class="rating"><div class="stars"><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star-half-alt"></i></div><span>@(m.Duration?.ToString() ?? "") phút</span></div>
                            <a href="@Url.Action("SelectShowtime", "Booking", new { movieId = m.MovieId })" class="book-btn" style="text-decoration: none; display: block;"><i class="fas fa-ticket-alt me-2"></i>Đặt Vé</a>
                        </div>
                    </div>
                </div>
            }
        </div>
        <h2 class="section-title reveal mt-5">Sắp Chiếu</h2>
        <div class="row">
            @foreach (var m in Model.ComingSoon)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="movie-card reveal">
                        <img src="@(!string.IsNullOrEmpty(m.PosterUrl) ? Url.Content("~/" + m.PosterUrl) : "https://placehold.co/400x250/ff6b35/ffffff?text=Movie")" alt="@m.Title" class="movie-poster" loading="lazy">
                        <div class="movie-info">
                            <h3 class="movie-title">@m.Title</h3>
                            <p class="movie-genre">@m.Genre</p>
                            <div class="rating"><div class="stars"><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="far fa-star"></i></div><span>@(m.Duration?.ToString() ?? "") phút</span></div>
                            <button class="book-btn" style="text-decoration: none; display: block; background: #6c757d; cursor: not-allowed;" disabled><i class="fas fa-clock me-2"></i>Sắp Chiếu</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

<!-- Login Modal -->
<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <div class="row">
                    <div class="col-md-6">
                        <div class="login-image-container">
                            <img src="~/img/hero-cinema.jpg" alt="Cinema" class="login-image">
                            <div class="login-overlay">
                                <div class="text-center text-white">
                                    <i class="fas fa-film fa-4x mb-3"></i>
                                    <h3>CineMax</h3>
                                    <p>Trải nghiệm điện ảnh đỉnh cao</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="login-form-container">
                            <div class="text-center mb-4">
                                <h2 class="login-title">Đăng Nhập</h2>
                                <p class="login-subtitle">Chào mừng bạn trở lại với CineMax</p>
                            </div>
                            <form id="loginForm">
                                <div class="form-group mb-3">
                                    <label for="username" class="form-label"><i class="fas fa-user me-2"></i>Tên đăng nhập</label>
                                    <input type="text" class="form-control login-input" id="username" placeholder="Nhập tên đăng nhập" required value="quangtam">
                                </div>
                                <div class="form-group mb-3">
                                    <label for="password" class="form-label"><i class="fas fa-lock me-2"></i>Mật khẩu</label>
                                    <input type="password" class="form-control login-input" id="homePassword" placeholder="Nhập mật khẩu" required value="password1">
                                </div>
                                <div class="form-group mb-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="rememberMe">
                                        <label class="form-check-label" for="rememberMe">
                                            Ghi nhớ đăng nhập
                                        </label>
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary login-btn w-100">
                                    <i class="fas fa-sign-in-alt me-2"></i>Đăng Nhập
                                </button>
                            </form>
                            <div class="text-center mt-4">
                                <p class="text-muted">Chưa có tài khoản? <a href="#" onclick="showRegisterForm()" class="text-primary"  style="text-decoration: none;">Đăng ký ngay</a></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Register Modal -->
<div class="modal fade" id="registerModal" tabindex="-1" aria-labelledby="registerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <div class="row">
                    <div class="col-md-6">
                        <div class="login-image-container">
                            <img src="~/img/hero-cinema.jpg" alt="Cinema" class="login-image">
                            <div class="login-overlay">
                                <div class="text-center text-white">
                                    <i class="fas fa-user-plus fa-4x mb-3"></i>
                                    <h3>Đăng Ký</h3>
                                    <p>Tham gia cùng chúng tôi</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="login-form-container">
                            <div class="text-center mb-4">
                                <h2 class="login-title">Đăng Ký Tài Khoản</h2>
                                <p class="login-subtitle">Tạo tài khoản mới để bắt đầu</p>
                            </div>
                            <form id="registerForm">
                                <div class="form-group mb-3">
                                    <label for="regUsername" class="form-label"><i class="fas fa-user me-2"></i>Tên đăng nhập</label>
                                    <input type="text" class="form-control login-input" id="regUsername" placeholder="Nhập tên đăng nhập" required>
                                    <div class="invalid-feedback" id="regUsername-error"></div>
                                    <div class="valid-feedback" id="regUsername-success"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label for="regEmail" class="form-label"><i class="fas fa-envelope me-2"></i>Email</label>
                                    <input type="email" class="form-control login-input" id="regEmail" placeholder="Nhập email" required>
                                    <div class="invalid-feedback" id="regEmail-error"></div>
                                    <div class="valid-feedback" id="regEmail-success"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label for="regPhone" class="form-label"><i class="fas fa-phone me-2"></i>Số điện thoại</label>
                                    <input type="tel" class="form-control login-input" id="regPhone" placeholder="Nhập số điện thoại">
                                    <div class="invalid-feedback" id="regPhone-error"></div>
                                    <div class="valid-feedback" id="regPhone-success"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label for="regPassword" class="form-label"><i class="fas fa-lock me-2"></i>Mật khẩu</label>
                                    <input type="password" class="form-control login-input" id="homeRegPassword" placeholder="Nhập mật khẩu" required>
                                    <div class="invalid-feedback" id="regPassword-error"></div>
                                    <div class="valid-feedback" id="regPassword-success"></div>
                                    <div class="form-text" id="regPassword-strength"></div>
                                </div>
                                <div class="form-group mb-4">
                                    <label for="regConfirmPassword" class="form-label"><i class="fas fa-lock me-2"></i>Xác nhận mật khẩu</label>
                                    <input type="password" class="form-control login-input" id="homeRegConfirmPassword" placeholder="Xác nhận mật khẩu" required>
                                    <div class="invalid-feedback" id="regConfirmPassword-error"></div>
                                    <div class="valid-feedback" id="regConfirmPassword-success"></div>
                                </div>
                                <button type="submit" class="btn btn-success login-btn w-100">
                                    <i class="fas fa-user-plus me-2"></i>Đăng Ký
                                </button>
                            </form>
                            <div class="text-center mt-4">
                                <p class="text-muted">Đã có tài khoản? <a href="#" onclick="showLoginForm()" class="text-primary">Đăng nhập</a></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .form-control.is-valid {
            border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        
        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        .valid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #28a745;
        }
        
        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }
        
        .form-text {
            font-size: 0.875em;
            margin-top: 0.25rem;
        }
        
        .text-danger {
            color: #dc3545 !important;
        }
        
        .text-warning {
            color: #ffc107 !important;
        }
        
        .text-success {
            color: #28a745 !important;
        }
    </style>
    <script>
        // theme toggle with persistence
        (function(){
            const body = document.body; const icon = document.getElementById('theme-icon'); const btn = document.getElementById('themeToggleBtn');
            const saved = localStorage.getItem('theme');
            if(saved === 'dark'){ body.setAttribute('data-theme','dark'); if(icon) icon.className='fas fa-sun'; }
            else if(saved === 'light'){ body.removeAttribute('data-theme'); if(icon) icon.className='fas fa-moon'; }
            if(btn){ btn.addEventListener('click', function(){ const dark = body.getAttribute('data-theme') === 'dark'; if(dark){ body.removeAttribute('data-theme'); localStorage.setItem('theme','light'); if(icon) icon.className='fas fa-moon'; } else { body.setAttribute('data-theme','dark'); localStorage.setItem('theme','dark'); if(icon) icon.className='fas fa-sun'; } }); }
        })();
        // Login form handling
        const loginForm = document.getElementById('loginForm');
        if(loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const username = document.getElementById('username').value;
                const password = document.getElementById('homePassword').value;
                const rememberMe = document.getElementById('rememberMe').checked;
                
                const button = this.querySelector('button[type="submit"]');
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="loading"></span> Đang xử lý...';
                button.disabled = true;
                
                try {
                    const response = await fetch('@Url.Action("Login", "Home", new { area = "Guest" })', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            username: username,
                            password: password,
                            rememberMe: rememberMe
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Hiển thị thông báo thành công
                        Swal.fire({
                            html: `
                                <div class="mt-3">
                                    <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                                    </lord-icon>
                                    <div class="mt-4 pt-2 fs-15">
                                        <h4>${result.message}</h4>
                                        <p class="text-muted mx-4 mb-0">${result.message}</p>
                                    </div>
                                </div>
                            `,
                            showConfirmButton: true,
                            confirmButtonText: 'Ok',
                            confirmButtonColor: '#0ab39c',
                            allowOutsideClick: true,
                            allowEscapeKey: true,
                            customClass: {
                                popup: 'swal2-custom-popup',
                                confirmButton: 'btn btn-primary w-xs mb-1'
                            }
                        }).then(() => {
                            // Đóng modal
                            const modal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));
                            if (modal) modal.hide();
                            
                            // Cập nhật UI ngay lập tức nếu có user data
                            if (result.user) {
                                // Kiểm tra trạng thái user
                                if (result.user.status === 'hoatdong') {
                                    updateUIAfterLogin(result.user);
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Lỗi!',
                                        text: 'Tài khoản không hoạt động',
                                        confirmButtonText: 'Đóng',
                                        confirmButtonColor: '#dc3545',
                                        allowOutsideClick: true,
                                        allowEscapeKey: true
                                    });
                                    return;
                                }
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: result.message,
                            confirmButtonText: 'Đóng',
                            confirmButtonColor: '#dc3545',
                            allowOutsideClick: true,
                            allowEscapeKey: true
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Có lỗi xảy ra khi đăng nhập',
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                } finally {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }
            });
        }
        
        // Real-time validation functions
        let validationTimeouts = {};
        
        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorDiv = document.getElementById(fieldId + '-error');
            const successDiv = document.getElementById(fieldId + '-success');
            
            field.classList.remove('is-valid');
            field.classList.add('is-invalid');
            errorDiv.textContent = message;
            successDiv.textContent = '';
        }
        
        function showFieldSuccess(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorDiv = document.getElementById(fieldId + '-error');
            const successDiv = document.getElementById(fieldId + '-success');
            
            field.classList.remove('is-invalid');
            field.classList.add('is-valid');
            errorDiv.textContent = '';
            successDiv.textContent = message;
        }
        
        function clearFieldValidation(fieldId) {
            const field = document.getElementById(fieldId);
            const errorDiv = document.getElementById(fieldId + '-error');
            const successDiv = document.getElementById(fieldId + '-success');
            
            field.classList.remove('is-valid', 'is-invalid');
            errorDiv.textContent = '';
            successDiv.textContent = '';
        }
        
        // Username validation
        function validateUsername(username) {
            if (!username || username.trim() === '') {
                showFieldError('regUsername', 'Tên đăng nhập không được để trống');
                return false;
            }
            
            if (username.length < 3) {
                showFieldError('regUsername', 'Tên đăng nhập phải có ít nhất 3 ký tự');
                return false;
            }
            
            if (username.length > 50) {
                showFieldError('regUsername', 'Tên đăng nhập không được vượt quá 50 ký tự');
                return false;
            }
            
            const usernameRegex = new RegExp('^[a-zA-Z0-9_]+$');
            if (!usernameRegex.test(username)) {
                showFieldError('regUsername', 'Tên đăng nhập chỉ được chứa chữ cái, số và dấu gạch dưới');
                return false;
            }
            
            return true;
        }
        
        // Email validation
        function validateEmail(email) {
            if (!email || email.trim() === '') {
                showFieldError('regEmail', 'Email không được để trống');
                return false;
            }
            
            if (email.length > 100) {
                showFieldError('regEmail', 'Email không được vượt quá 100 ký tự');
                return false;
            }
            
            // Simple email validation without complex regex
            const atSymbol = String.fromCharCode(64);
            const emailParts = email.split(atSymbol);
            if (emailParts.length !== 2 || emailParts[0].length === 0 || emailParts[1].length === 0) {
                showFieldError('regEmail', 'Email không đúng định dạng');
                return false;
            }
            
            // Check if domain has at least one dot
            if (!emailParts[1].includes('.')) {
                showFieldError('regEmail', 'Email không đúng định dạng');
                return false;
            }
            
            return true;
        }
        
        // Phone validation
        function validatePhone(phone) {
            if (phone && phone.trim() !== '') {
                const phoneRegex = new RegExp('^[0-9+\\-\\s()]+$');
                if (!phoneRegex.test(phone)) {
                    showFieldError('regPhone', 'Số điện thoại chỉ được chứa số và các ký tự +, -, (, ), khoảng trắng');
                    return false;
                }
                
                const cleanPhone = phone.replace(new RegExp('[^0-9]', 'g'), '');
                if (cleanPhone.length < 10 || cleanPhone.length > 11) {
                    showFieldError('regPhone', 'Số điện thoại phải có 10-11 chữ số');
                    return false;
                }
            }
            
            return true;
        }
        
        // Password strength validation
        function validatePassword(password) {
            if (!password || password.trim() === '') {
                showFieldError('homeRegPassword', 'Mật khẩu không được để trống');
                return false;
            }
            
            if (password.length < 6) {
                showFieldError('homeRegPassword', 'Mật khẩu phải có ít nhất 6 ký tự');
                return false;
            }
            
            if (password.length > 255) {
                showFieldError('homeRegPassword', 'Mật khẩu không được vượt quá 255 ký tự');
                return false;
            }
            
            // Check password strength
            let strength = 0;
            let strengthText = '';
            let strengthColor = '';
            
            if (password.length >= 8) strength++;
            if (new RegExp('[a-z]').test(password)) strength++;
            if (new RegExp('[A-Z]').test(password)) strength++;
            if (new RegExp('[0-9]').test(password)) strength++;
            if (new RegExp('[^A-Za-z0-9]').test(password)) strength++;
            
            if (strength < 2) {
                strengthText = 'Mật khẩu yếu';
                strengthColor = 'text-danger';
            } else if (strength < 4) {
                strengthText = 'Mật khẩu trung bình';
                strengthColor = 'text-warning';
            } else {
                strengthText = 'Mật khẩu mạnh';
                strengthColor = 'text-success';
            }
            
            const strengthDiv = document.getElementById('regPassword-strength');
            strengthDiv.innerHTML = `<small class="${strengthColor}">${strengthText}</small>`;
            
            return true;
        }
        
        // Confirm password validation
        function validateConfirmPassword(password, confirmPassword) {
            if (!confirmPassword || confirmPassword.trim() === '') {
                showFieldError('homeRegConfirmPassword', 'Xác nhận mật khẩu không được để trống');
                return false;
            }
            
            if (password !== confirmPassword) {
                showFieldError('homeRegConfirmPassword', 'Mật khẩu xác nhận không khớp');
                return false;
            }
            
            return true;
        }
        
        // Check username availability
        async function checkUsernameAvailability(username) {
            if (!validateUsername(username)) return;
            
            try {
                const response = await fetch(`@Url.Action("CheckUsername", "Home", new { area = "Guest" })?username=${encodeURIComponent(username)}`);
                const result = await response.json();
                
                if (result.success) {
                    if (result.available) {
                        showFieldSuccess('regUsername', result.message);
                    } else {
                        showFieldError('regUsername', result.message);
                    }
                }
            } catch (error) {
                console.error('Error checking username:', error);
            }
        }
        
        // Check email availability
        async function checkEmailAvailability(email) {
            if (!validateEmail(email)) return;
            
            try {
                const response = await fetch(`@Url.Action("CheckEmail", "Home", new { area = "Guest" })?email=${encodeURIComponent(email)}`);
                const result = await response.json();
                
                if (result.success) {
                    if (result.available) {
                        showFieldSuccess('regEmail', result.message);
                    } else {
                        showFieldError('regEmail', result.message);
                    }
                }
            } catch (error) {
                console.error('Error checking email:', error);
            }
        }
        
        // Setup real-time validation
        function setupRealTimeValidation() {
            // Username validation
            const usernameField = document.getElementById('regUsername');
            if (usernameField) {
                usernameField.addEventListener('input', function() {
                    clearTimeout(validationTimeouts.username);
                    clearFieldValidation('regUsername');
                    
                    const username = this.value.trim();
                    if (username) {
                        validationTimeouts.username = setTimeout(() => {
                            checkUsernameAvailability(username);
                        }, 500);
                    }
                });
            }
            
            // Email validation
            const emailField = document.getElementById('regEmail');
            if (emailField) {
                emailField.addEventListener('input', function() {
                    clearTimeout(validationTimeouts.email);
                    clearFieldValidation('regEmail');
                    
                    const email = this.value.trim();
                    if (email) {
                        validationTimeouts.email = setTimeout(() => {
                            checkEmailAvailability(email);
                        }, 500);
                    }
                });
            }
            
            // Phone validation
            const phoneField = document.getElementById('regPhone');
            if (phoneField) {
                phoneField.addEventListener('input', function() {
                    clearFieldValidation('regPhone');
                    const phone = this.value.trim();
                    if (phone) {
                        validatePhone(phone);
                    } else {
                        clearFieldValidation('regPhone');
                    }
                });
            }
            
            // Password validation
            const passwordField = document.getElementById('homeRegPassword');
            if (passwordField) {
                passwordField.addEventListener('input', function() {
                    clearFieldValidation('homeRegPassword');
                    const password = this.value;
                    if (password) {
                        validatePassword(password);
                    }
                });
            }
            
            // Confirm password validation
            const confirmPasswordField = document.getElementById('homeRegConfirmPassword');
            if (confirmPasswordField) {
                confirmPasswordField.addEventListener('input', function() {
                    clearFieldValidation('homeRegConfirmPassword');
                    const password = document.getElementById('homeRegPassword').value;
                    const confirmPassword = this.value;
                    if (confirmPassword) {
                        validateConfirmPassword(password, confirmPassword);
                    }
                });
            }
        }
        
        // Initialize real-time validation
        setupRealTimeValidation();
        
        // Register form handling
        const registerForm = document.getElementById('registerForm');
        if(registerForm) {
            registerForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const username = document.getElementById('regUsername').value;
                const email = document.getElementById('regEmail').value;
                const phone = document.getElementById('regPhone').value;
                const password = document.getElementById('homeRegPassword').value;
                const confirmPassword = document.getElementById('homeRegConfirmPassword').value;
                
                // Final validation before submit
                let isValid = true;
                
                if (!validateUsername(username)) isValid = false;
                if (!validateEmail(email)) isValid = false;
                if (!validatePhone(phone)) isValid = false;
                if (!validatePassword(password)) isValid = false;
                if (!validateConfirmPassword(password, confirmPassword)) isValid = false;
                
                if (!isValid) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Vui lòng kiểm tra lại thông tin đã nhập',
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                    return;
                }
                
                const button = this.querySelector('button[type="submit"]');
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="loading"></span> Đang xử lý...';
                button.disabled = true;
                
                try {
                    const response = await fetch('@Url.Action("Register", "Home", new { area = "Guest" })', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            username: username,
                            email: email,
                            phone: phone,
                            password: password,
                            confirmPassword: confirmPassword
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        Swal.fire({
                            html: `
                                <div class="mt-3">
                                    <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                                    </lord-icon>
                                    <div class="mt-4 pt-2 fs-15">
                                        <h4>${result.message}</h4>
                                        <p class="text-muted mx-4 mb-0">${result.message}</p>
                                    </div>
                                </div>
                            `,
                            showConfirmButton: true,
                            confirmButtonText: 'Ok',
                            confirmButtonColor: '#0ab39c',
                            allowOutsideClick: true,
                            allowEscapeKey: true,
                            customClass: {
                                popup: 'swal2-custom-popup',
                                confirmButton: 'btn btn-primary w-xs mb-1'
                            }
                        }).then(() => {
                            // Chuyển về form đăng nhập
                            showLoginForm();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: result.message,
                            confirmButtonText: 'Đóng',
                            confirmButtonColor: '#dc3545',
                            allowOutsideClick: true,
                            allowEscapeKey: true
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Có lỗi xảy ra khi đăng ký',
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                } finally {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }
            });
        }
        
        // Helper functions
        function showLoginForm() {
            const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
            const registerModal = bootstrap.Modal.getInstance(document.getElementById('registerModal'));
            if (registerModal) registerModal.hide();
            loginModal.show();
        }
        
        function showRegisterForm() {
            const registerModal = new bootstrap.Modal(document.getElementById('registerModal'));
            const loginModal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));
            if (loginModal) loginModal.hide();
            registerModal.show();
        }
        
        function showNotification(message, type) {
            if (type === 'success') {
                Swal.fire({
                    html: `
                        <div class="mt-3">
                            <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                            </lord-icon>
                            <div class="mt-4 pt-2 fs-15">
                                <h4>${message}</h4>
                                <p class="text-muted mx-4 mb-0">${message}</p>
                            </div>
                        </div>
                    `,
                    showConfirmButton: true,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: '#0ab39c',
                    allowOutsideClick: true,
                    allowEscapeKey: true,
                    customClass: {
                        popup: 'swal2-custom-popup',
                        confirmButton: 'btn btn-primary w-xs mb-1'
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: message,
                    confirmButtonText: 'Đóng',
                    confirmButtonColor: '#dc3545',
                    allowOutsideClick: true,
                    allowEscapeKey: true
                });
            }
        }
        
        async function logout() {
            try {
                const response = await fetch('@Url.Action("Logout", "Home", new { area = "Guest" })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Swal.fire({
                        html: `
                            <div class="mt-3">
                                <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                                </lord-icon>
                                <div class="mt-4 pt-2 fs-15">
                                    <h4>${result.message}</h4>
                                    <p class="text-muted mx-4 mb-0">${result.message}</p>
                                </div>
                            </div>
                        `,
                        showConfirmButton: true,
                        confirmButtonText: 'Ok',
                        confirmButtonColor: '#0ab39c',
                        allowOutsideClick: true,
                        allowEscapeKey: true,
                        customClass: {
                            popup: 'swal2-custom-popup',
                            confirmButton: 'btn btn-primary w-xs mb-1'
                        }
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: result.message,
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#dc3545',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Có lỗi xảy ra khi đăng xuất',
                    confirmButtonText: 'Đóng',
                    confirmButtonColor: '#dc3545',
                    allowOutsideClick: true,
                    allowEscapeKey: true
                });
            }
        }
        
        function showLoginModal() {
            const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
            loginModal.show();
        }
        
        // Function để cập nhật UI sau khi đăng nhập thành công
        function updateUIAfterLogin(userData) {
            const navbar = document.querySelector('.navbar');
            const loginButton = navbar.querySelector('.login-button');
            
            if (loginButton) {
                // Thay thế nút đăng nhập bằng thông tin user trong navbar
                const userInfoHTML = `
                    <div class="user-nav-section ms-3 d-flex align-items-center">
                        <div class="user-info me-3">
                            <div class="user-greeting-nav fw-bold">Xin chào, ${userData.username}!</div>
                            <div class="user-role-nav small">${userData.role === 'Admin' ? 'Quản trị viên' : 'Khách hàng'}</div>
                        </div>
                        <div class="user-actions-nav d-flex align-items-center gap-2">
                            ${userData.role === 'Admin' ? 
                                '<a href="/Admin/Home" class="btn btn-warning"><i class="fas fa-gauge-high me-1"></i>Admin</a>' : 
                                ''
                            }
                            <button onclick="logout()" class="btn btn-outline-secondary">
                                <i class="fas fa-sign-out-alt me-1"></i>Đăng Xuất
                            </button>
                        </div>
                    </div>
                `;
                
                loginButton.outerHTML = userInfoHTML;
            }
        }
        // reveal animation
        function revealOnScroll(){ const els=document.querySelectorAll('.reveal'); els.forEach(el=>{ const wh=window.innerHeight; const top=el.getBoundingClientRect().top; if(top<wh-150){ el.classList.add('active'); } }); }
        window.addEventListener('scroll', revealOnScroll); 
        window.addEventListener('load', function() {
            revealOnScroll();
            // Kiểm tra trạng thái đăng nhập khi trang load
            checkLoginStatus();
        });
        
        // Function để kiểm tra trạng thái đăng nhập
        async function checkLoginStatus() {
            try {
                const response = await fetch('@Url.Action("GetCurrentUser", "Home", new { area = "Guest" })');
                const result = await response.json();
                
                if (result.success && result.isLoggedIn && result.user) {
                    console.log('User is logged in:', result.user);
                    // Kiểm tra trạng thái user trước khi cập nhật UI
                    if (result.user.status === 'hoatdong') {
                        updateUIAfterLogin(result.user);
                    } else {
                        console.log('User account is not active');
                        // Nếu tài khoản không hoạt động, logout
                        await logout();
                    }
                } else {
                    console.log('User is not logged in');
                }
            } catch (error) {
                console.log('Error checking login status:', error);
            }
        }
        // Trailer Slideshow functionality
        let currentSlide = 0;
        let slideshowInterval = null;
        let isPlaying = false;
        let slides = [];
        let isVideoPlaying = false; // Flag to prevent duplicate video players
        let isUserScrolled = false; // Flag to track if user has scrolled down
        
        function initSlideshow() {
            console.log('Initializing slideshow...');
            slides = document.querySelectorAll('.trailer-slide');
            console.log('Found slides:', slides.length);
            
            // Debug: Log details of each slide
            slides.forEach((slide, index) => {
                const title = slide.dataset.title;
                const movieId = slide.dataset.movieId;
                const trailerUrl = slide.dataset.trailerUrl;
                console.log(`Slide ${index}: ${title} (ID: ${movieId}) - Trailer: ${trailerUrl}`);
            });
            
            // Debug: Check if there are duplicate slides
            const titles = Array.from(slides).map(slide => slide.dataset.title);
            const uniqueTitles = [...new Set(titles)];
            console.log('All titles:', titles);
            console.log('Unique titles:', uniqueTitles);
            console.log('Has duplicates:', titles.length !== uniqueTitles.length);
            
            if (slides.length === 0) {
                console.log('No slides found, retrying...');
                setTimeout(initSlideshow, 500);
                return;
            }
            
            // Ensure first slide is active
            slides.forEach((slide, index) => {
                slide.classList.remove('active', 'prev');
                if (index === 0) {
                    slide.classList.add('active');
                }
            });
            
            console.log('Starting slideshow...');
            // Start auto-play immediately only if user hasn't scrolled
            setTimeout(() => {
                if (!isUserScrolled && window.scrollY <= 50) {
                    startSlideshow();
                    // Auto-play first trailer after slideshow starts
                    // setTimeout(() => {
                    //     autoPlayFirstTrailer();
                    // }, 2000); // Delay để slideshow hiển thị trước
                } else {
                    console.log('Auto-play disabled - user has scrolled or at bottom of page');
                }
            }, 200); // Small delay to ensure DOM is ready
            
            // Pause on hover
            const slideshow = document.getElementById('trailerSlideshow');
            if (slideshow) {
                slideshow.addEventListener('mouseenter', pauseSlideshow);
                slideshow.addEventListener('mouseleave', resumeSlideshow);
            }
        }
        
        function autoPlayFirstTrailer() {
            console.log('Auto-playing first trailer...');
            const firstSlide = slides[0];
            const trailerUrl = firstSlide.dataset.trailerUrl;
            
            if (trailerUrl && trailerUrl.trim() !== '') {
                // Pause slideshow
                pauseSlideshow();
                
                // Hide slideshow
                const slideshow = document.getElementById('trailerSlideshow');
                slideshow.style.display = 'none';
                
                // Check if it's YouTube embed
                if (trailerUrl.includes('youtube.com/embed/')) {
                    // Create YouTube iframe
                    const youtubeContainer = document.createElement('div');
                    youtubeContainer.className = 'youtube-container';
                    youtubeContainer.style.cssText = 'position: relative; width: 100%; height: 500px; border-radius: 20px; overflow: hidden;';
                    
                    const iframe = document.createElement('iframe');
                    iframe.src = trailerUrl + '?autoplay=1&rel=0&mute=0';
                    iframe.style.cssText = 'width: 100%; height: 100%; border: none;';
                    iframe.allow = 'autoplay; encrypted-media';
                    iframe.allowFullscreen = true;
                    
                    youtubeContainer.appendChild(iframe);
                    
                    // Show back button
                    const backBtn = document.createElement('button');
                    backBtn.className = 'back-btn position-absolute';
                    backBtn.style.cssText = 'top: 20px; right: 20px; z-index: 1000;';
                    backBtn.innerHTML = '<i class="fas fa-arrow-left"></i>Quay lại';
                    backBtn.onclick = function() {
                        youtubeContainer.remove();
                        slideshow.style.display = 'block';
                        startSlideshow();
                    };
                    // Add hover effects
                    backBtn.onmouseover = () => {
                        backBtn.style.background = 'linear-gradient(135deg, rgba(255, 107, 53, 1) 0%, rgba(247, 147, 30, 1) 100%)';
                        backBtn.style.transform = 'translateY(-2px) scale(1.05)';
                        backBtn.style.boxShadow = '0 6px 20px rgba(255, 107, 53, 0.6)';
                        backBtn.style.borderColor = 'rgba(255, 255, 255, 0.5)';
                    };
                    backBtn.onmouseout = () => {
                        backBtn.style.background = 'linear-gradient(135deg, rgba(255, 107, 53, 0.95) 0%, rgba(247, 147, 30, 0.95) 100%)';
                        backBtn.style.transform = 'translateY(0) scale(1)';
                        backBtn.style.boxShadow = '0 4px 15px rgba(255, 107, 53, 0.4)';
                        backBtn.style.borderColor = 'rgba(255, 255, 255, 0.3)';
                    };
                    youtubeContainer.appendChild(backBtn);
                    
                    slideshow.parentElement.appendChild(youtubeContainer);
                } else {
                    // Regular video
                    const video = document.getElementById('mainTrailer');
                    const source = video.querySelector('source');
                    
                    video.style.display = 'block';
                    source.src = trailerUrl;
                    video.load();
                    video.play();
                    
                    // Show back button
                    const backBtn = document.createElement('button');
                    backBtn.className = 'back-btn position-absolute';
                    backBtn.style.cssText = 'top: 20px; right: 20px; z-index: 1000;';
                    backBtn.innerHTML = '<i class="fas fa-arrow-left"></i>Quay lại';
                    backBtn.onclick = function() {
                        video.pause();
                        video.style.display = 'none';
                        slideshow.style.display = 'block';
                        startSlideshow();
                        backBtn.remove();
                    };
                    // Add hover effects
                    backBtn.onmouseover = () => {
                        backBtn.style.background = 'linear-gradient(135deg, rgba(255, 107, 53, 1) 0%, rgba(247, 147, 30, 1) 100%)';
                        backBtn.style.transform = 'translateY(-2px) scale(1.05)';
                        backBtn.style.boxShadow = '0 6px 20px rgba(255, 107, 53, 0.6)';
                        backBtn.style.borderColor = 'rgba(255, 255, 255, 0.5)';
                    };
                    backBtn.onmouseout = () => {
                        backBtn.style.background = 'linear-gradient(135deg, rgba(255, 107, 53, 0.95) 0%, rgba(247, 147, 30, 0.95) 100%)';
                        backBtn.style.transform = 'translateY(0) scale(1)';
                        backBtn.style.boxShadow = '0 4px 15px rgba(255, 107, 53, 0.4)';
                        backBtn.style.borderColor = 'rgba(255, 255, 255, 0.3)';
                    };
                    video.parentElement.appendChild(backBtn);
                }
            }
        }
        
        function startSlideshow() {
            console.log('Starting slideshow...');
            if (slideshowInterval) clearInterval(slideshowInterval);
            slideshowInterval = setInterval(() => {
                console.log('Auto-advancing slide...');
                nextSlide();
            }, 4000); // Change slide every 4 seconds for better viewing experience
            isPlaying = true;
            updatePlayPauseButton();
            console.log('Slideshow started, interval:', slideshowInterval);
        }
        
        function pauseSlideshow() {
            if (slideshowInterval) {
                clearInterval(slideshowInterval);
                slideshowInterval = null;
            }
            isPlaying = false;
            updatePlayPauseButton();
        }
        
        function resumeSlideshow() {
            if (!isPlaying) {
                startSlideshow();
            }
        }
        
        function toggleSlideshow() {
            if (isPlaying) {
                pauseSlideshow();
            } else {
                startSlideshow();
            }
        }
        
        function updatePlayPauseButton() {
            const btn = document.getElementById('playPauseBtn');
            if (btn) {
                const icon = btn.querySelector('i');
                if (isPlaying) {
                    icon.className = 'fas fa-pause';
                } else {
                    icon.className = 'fas fa-play';
                }
            }
        }
        
        function goToSlide(index) {
            if (index < 0 || index >= slides.length) return;
            
            // Remove active class from current slide
            slides[currentSlide].classList.remove('active');
            slides[currentSlide].classList.add('prev');
            
            // Add active class to new slide
            currentSlide = index;
            slides[currentSlide].classList.remove('prev');
            slides[currentSlide].classList.add('active');
            
            // Update nav dots
            document.querySelectorAll('.nav-dot').forEach((dot, i) => {
                dot.classList.toggle('active', i === currentSlide);
            });
            
            // Restart slideshow
            startSlideshow();
        }
        
        function nextSlide() {
            console.log('nextSlide called, currentSlide:', currentSlide, 'slides.length:', slides.length);
            const nextIndex = (currentSlide + 1) % slides.length;
            console.log('Going to slide:', nextIndex);
            goToSlide(nextIndex);
        }
        
        function previousSlide() {
            const prevIndex = (currentSlide - 1 + slides.length) % slides.length;
            goToSlide(prevIndex);
        }
        
        function playTrailer(type) {
            if (type === 'main') {
                const currentSlideElement = slides[currentSlide];
                const trailerUrl = currentSlideElement.dataset.trailerUrl;
                const title = currentSlideElement.dataset.title;
                
                if (trailerUrl && trailerUrl.trim() !== '') {
                    const slideshow = document.getElementById('trailerSlideshow');
                    
                    // Pause slideshow
                    pauseSlideshow();
                    
                    // Hide slideshow
                    slideshow.style.display = 'none';
                    
                    // Check if it's YouTube embed
                    if (trailerUrl.includes('youtube.com/embed/')) {
                        // Create YouTube iframe
                        const youtubeContainer = document.createElement('div');
                        youtubeContainer.className = 'youtube-container';
                        youtubeContainer.style.cssText = 'position: relative; width: 100%; height: 400px; border-radius: 20px; overflow: hidden;';
                        
                        const iframe = document.createElement('iframe');
                        iframe.src = trailerUrl + '?autoplay=1&rel=0';
                        iframe.style.cssText = 'width: 100%; height: 100%; border: none;';
                        iframe.allow = 'autoplay; encrypted-media';
                        iframe.allowFullscreen = true;
                        
                        youtubeContainer.appendChild(iframe);
                        
                        // Show back button
                        const backBtn = document.createElement('button');
                        backBtn.className = 'back-btn position-absolute';
                        backBtn.style.cssText = 'top: 20px; right: 20px; z-index: 1000;';
                        backBtn.innerHTML = '<i class="fas fa-arrow-left"></i>Quay lại';
                        backBtn.onclick = function() {
                            youtubeContainer.remove();
                            slideshow.style.display = 'block';
                            startSlideshow();
                        };
                        youtubeContainer.appendChild(backBtn);
                        
                        slideshow.parentElement.appendChild(youtubeContainer);
                    } else {
                        // Regular video
                        const video = document.getElementById('mainTrailer');
                        const source = video.querySelector('source');
                        
                        video.style.display = 'block';
                        source.src = trailerUrl;
                        video.load();
                        video.play();
                        
                        // Show back button
                        const backBtn = document.createElement('button');
                        backBtn.className = 'back-btn position-absolute';
                        backBtn.style.cssText = 'top: 20px; right: 20px; z-index: 1000;';
                        backBtn.innerHTML = '<i class="fas fa-arrow-left"></i>Quay lại';
                        backBtn.onclick = function() {
                            video.pause();
                            video.style.display = 'none';
                            slideshow.style.display = 'block';
                            startSlideshow();
                            backBtn.remove();
                        };
                        video.parentElement.appendChild(backBtn);
                    }
                } else {
                    Swal.fire({
                        icon: 'info',
                        title: 'Thông báo',
                        text: 'Trailer cho phim này chưa có sẵn',
                        confirmButtonText: 'Đóng',
                        confirmButtonColor: '#ff6b35',
                        allowOutsideClick: true,
                        allowEscapeKey: true
                    });
                }
            }
        }
        
        function selectTrailer(movieId, title, description, trailerUrl) {
            // Update active state in sidebar
            document.querySelectorAll('.trailer-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
            
            // Find and go to corresponding slide
            const slideIndex = Array.from(slides).findIndex(slide => 
                slide.dataset.movieId === movieId
            );
            
            if (slideIndex !== -1) {
                goToSlide(slideIndex);
            }
        }
        
        // Force start slideshow function
        function forceStartSlideshow() {
            console.log('Force starting slideshow...');
            initSlideshow();
            
            // If still not working after 1 second, try again
            setTimeout(() => {
                if (!isPlaying || slideshowInterval === null) {
                    console.log('Slideshow not started, retrying...');
                    initSlideshow();
                }
            }, 1000);
        }
        
        // Scroll detection - VÔ HIỆU HÓA AUTO-PLAY KHI SCROLL XUỐNG
        function handleScroll() {
            const slideshow = document.getElementById('trailerSlideshow');
            if (slideshow) {
                const slideshowRect = slideshow.getBoundingClientRect();
                const isVisible = slideshowRect.top < window.innerHeight && slideshowRect.bottom > 0;
                
                // Nếu người dùng đã scroll xuống, VÔ HIỆU HÓA HOÀN TOÀN auto-play
                if (window.scrollY > 50) {
                    isUserScrolled = true;
                    if (isPlaying) {
                        pauseSlideshow();
                        console.log('User scrolled down - AUTO-PLAY DISABLED');
                    }
                    // Hiển thị nút enable auto-play
                    const enableBtn = document.getElementById('autoPlayEnable');
                    if (enableBtn) {
                        enableBtn.style.display = 'block';
                    }
                    // Không bao giờ tự động resume khi đã scroll xuống
                    return;
                } else {
                    // Ẩn nút enable auto-play khi ở đầu trang
                    const enableBtn = document.getElementById('autoPlayEnable');
                    if (enableBtn) {
                        enableBtn.style.display = 'none';
                    }
                }
                
                // Chỉ cho phép auto-play khi ở đầu trang và chưa scroll
                if (window.scrollY <= 50 && !isUserScrolled) {
                    if (!isPlaying) {
                        startSlideshow();
                        console.log('At top of page - AUTO-PLAY ENABLED');
                    }
                }
            }
        }
        
        // Initialize slideshow on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded');
            forceStartSlideshow();
            
            // Add scroll listener
            window.addEventListener('scroll', handleScroll);
        });
        
        // Also initialize when window loads (backup)
        window.addEventListener('load', function() {
            console.log('Window Loaded');
            if (!isPlaying || slideshowInterval === null) {
                forceStartSlideshow();
            }
        });
        
        // Additional backup - start after 2 seconds
        setTimeout(() => {
            console.log('Backup initialization after 2 seconds');
            if (!isPlaying || slideshowInterval === null) {
                forceStartSlideshow();
            }
        }, 2000);
        
        // book
        function bookMovie(movieTitle) {
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '<span class="loading"></span> Đang xử lý...';
            button.disabled = true;
            
            setTimeout(() => {
                Swal.fire({
                    html: `
                        <div class="mt-3">
                            <lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px">
                            </lord-icon>
                            <div class="mt-4 pt-2 fs-15">
                                <h4>Đặt vé thành công!</h4>
                                <p class="text-muted mx-4 mb-0">Bạn đã chọn đặt vé cho phim: "${movieTitle}"<br>Vui lòng chọn suất chiếu và ghế ngồi!</p>
                            </div>
                        </div>
                    `,
                    showConfirmButton: true,
                    confirmButtonText: 'Ok',
                    confirmButtonColor: '#0ab39c',
                    allowOutsideClick: true,
                    allowEscapeKey: true,
                    customClass: {
                        popup: 'swal2-custom-popup',
                        confirmButton: 'btn btn-primary w-xs mb-1'
                    }
                });
                
                button.innerHTML = originalText;
                button.disabled = false;
            }, 800);
        }
        
        // Enhanced auto-play function with better UX
        function autoPlayFirstTrailer() {
            console.log('Auto-playing first trailer...');
            
            // Kiểm tra xem đã có video đang phát chưa
            if (isVideoPlaying) {
                console.log('Video is already playing, skipping...');
                return;
            }
            
            // Kiểm tra xem đã có video container chưa
            const existingVideo = document.querySelector('.trailer-video-container');
            if (existingVideo) {
                console.log('Video container already exists, removing...');
                existingVideo.remove();
            }
            
            // Set flag
            isVideoPlaying = true;
            
            const slideshow = document.getElementById('trailerSlideshow');
            if (slideshow) {
                const activeSlide = slideshow.querySelector('.trailer-slide.active');
                if (activeSlide) {
                    const trailerUrl = activeSlide.dataset.trailerUrl;
                    const title = activeSlide.dataset.title;
                    
                    // Pause slideshow
                    pauseSlideshow();
                    
                    // Hide slideshow
                    slideshow.style.display = 'none';
                    
                    if (trailerUrl.includes('youtube.com/embed/')) {
                        // Enhanced YouTube video container
                        const youtubeContainer = document.createElement('div');
                        youtubeContainer.className = 'trailer-video-container';
                        youtubeContainer.style.cssText = `
                            position: relative;
                            width: 100%;
                            height: 500px;
                            background: #000;
                            border-radius: 20px;
                            overflow: hidden;
                            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                        `;
                        
                        // Enhanced controls
                        const controlsContainer = document.createElement('div');
                        controlsContainer.style.cssText = `
                            position: absolute;
                            top: 0;
                            left: 0;
                            right: 0;
                            z-index: 10;
                            background: linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, transparent 100%);
                            padding: 20px;
                            display: flex;
                            justify-content: space-between;
                            align-items: flex-start;
                        `;
                        
                        // Back button
                        const backBtn = document.createElement('button');
                        backBtn.innerHTML = '← Quay lại Slideshow';
                        backBtn.style.cssText = `
                            background: linear-gradient(135deg, rgba(255, 107, 53, 0.95) 0%, rgba(247, 147, 30, 0.95) 100%);
                            color: white;
                            border: none;
                            padding: 14px 28px;
                            border-radius: 30px;
                            cursor: pointer;
                            font-size: 15px;
                            font-weight: 700;
                            transition: all 0.3s ease;
                            box-shadow: 0 6px 20px rgba(255, 107, 53, 0.4);
                            backdrop-filter: blur(10px);
                            border: 2px solid rgba(255, 255, 255, 0.2);
                            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
                            letter-spacing: 0.5px;
                        `;
                        backBtn.onclick = function() {
                            youtubeContainer.remove();
                            slideshow.style.display = 'block';
                            isVideoPlaying = false; // Reset flag
                            startSlideshow();
                        };
                        backBtn.onmouseover = () => {
                            backBtn.style.background = 'linear-gradient(135deg, rgba(255, 107, 53, 1) 0%, rgba(247, 147, 30, 1) 100%)';
                            backBtn.style.transform = 'translateY(-3px) scale(1.05)';
                            backBtn.style.boxShadow = '0 8px 25px rgba(255, 107, 53, 0.6)';
                            backBtn.style.borderColor = 'rgba(255, 255, 255, 0.4)';
                        };
                        backBtn.onmouseout = () => {
                            backBtn.style.background = 'linear-gradient(135deg, rgba(255, 107, 53, 0.95) 0%, rgba(247, 147, 30, 0.95) 100%)';
                            backBtn.style.transform = 'translateY(0) scale(1)';
                            backBtn.style.boxShadow = '0 6px 20px rgba(255, 107, 53, 0.4)';
                            backBtn.style.borderColor = 'rgba(255, 255, 255, 0.2)';
                        };
                        
                        // Skip button
                        const skipBtn = document.createElement('button');
                        skipBtn.innerHTML = '⏭️ Bỏ qua';
                        skipBtn.style.cssText = `
                            background: linear-gradient(135deg, rgba(255,255,255,0.25) 0%, rgba(255,255,255,0.15) 100%);
                            color: white;
                            border: 2px solid rgba(255, 255, 255, 0.3);
                            padding: 14px 28px;
                            border-radius: 30px;
                            cursor: pointer;
                            font-size: 15px;
                            font-weight: 700;
                            transition: all 0.3s ease;
                            backdrop-filter: blur(15px);
                            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
                            letter-spacing: 0.5px;
                            box-shadow: 0 4px 15px rgba(255, 255, 255, 0.1);
                        `;
                        skipBtn.onclick = function() {
                            // Auto-play next trailer
                            autoPlayNextTrailer();
                        };
                        skipBtn.onmouseover = () => {
                            skipBtn.style.background = 'linear-gradient(135deg, rgba(255,255,255,0.4) 0%, rgba(255,255,255,0.25) 100%)';
                            skipBtn.style.transform = 'translateY(-3px) scale(1.05)';
                            skipBtn.style.borderColor = 'rgba(255, 255, 255, 0.5)';
                            skipBtn.style.boxShadow = '0 6px 20px rgba(255, 255, 255, 0.2)';
                        };
                        skipBtn.onmouseout = () => {
                            skipBtn.style.background = 'linear-gradient(135deg, rgba(255,255,255,0.25) 0%, rgba(255,255,255,0.15) 100%)';
                            skipBtn.style.transform = 'translateY(0) scale(1)';
                            skipBtn.style.borderColor = 'rgba(255, 255, 255, 0.3)';
                            skipBtn.style.boxShadow = '0 4px 15px rgba(255, 255, 255, 0.1)';
                        };
                        
                        controlsContainer.appendChild(backBtn);
                        controlsContainer.appendChild(skipBtn);
                        youtubeContainer.appendChild(controlsContainer);
                        
                        // YouTube iframe with better parameters
                        const iframe = document.createElement('iframe');
                        iframe.src = trailerUrl + '?autoplay=1&rel=0&mute=0&controls=1&showinfo=0&modestbranding=1';
                        iframe.style.cssText = 'width: 100%; height: 100%; border: none;';
                        iframe.allow = 'autoplay; encrypted-media; fullscreen';
                        youtubeContainer.appendChild(iframe);
                        
                        slideshow.parentElement.appendChild(youtubeContainer);
                    }
                }
            }
        }
        
        function autoPlayNextTrailer() {
            console.log('Auto-playing next trailer...');
            // Remove current video
            const currentVideo = document.querySelector('.trailer-video-container');
            if (currentVideo) {
                currentVideo.remove();
            }
            
            // Reset flag
            isVideoPlaying = false;
            
            // Go to next slide
            nextSlide();
            
            // Auto-play after a short delay
            // setTimeout(() => {
            //     autoPlayFirstTrailer();
            // }, 500);
        }
        
        // Hàm bật lại auto-play
        function enableAutoPlay() {
            console.log('Enabling auto-play...');
            isUserScrolled = false;
            startSlideshow();
            
            // Ẩn nút enable
            const enableBtn = document.getElementById('autoPlayEnable');
            if (enableBtn) {
                enableBtn.style.display = 'none';
            }
            
            // Auto-play trailer sau 1 giây
            // setTimeout(() => {
            //     autoPlayFirstTrailer();
            // }, 1000);
        }
        
        // // Demo section để so sánh nút cũ và mới
        // document.addEventListener('DOMContentLoaded', function() {
        //     // Tạo demo section
        //     const demoSection = document.createElement('div');
        //     demoSection.className = 'demo-section';
        //     demoSection.innerHTML = `
        //         <h6>So sánh nút "Quay lại":</h6>
        //         <a href="#" class="demo-old-btn">← Quay lại (Cũ)</a>
        //         <button class="back-btn">Quay lại (Mới)</button>
        //     `;
        //     document.body.appendChild(demoSection);
            
        //     // Ẩn demo sau 10 giây
        //     setTimeout(() => {
        //         demoSection.style.display = 'none';
        //     }, 10000);
        // });
    </script>
} 
